// Protocol definition grammar in BNF.
<File>          ::= Doc? 'module' Identifier ';' Import* Definition*

// Doc string.
<Doc>           ::= '/**' '...text...' '*/'

// Imports can be absolute and relative to an absolute module.
<Import>        ::= AbsImport | RelImport
<AbsImport>     ::= 'import' Identifier ';'
<RelImport>     ::= 'from' Identifier 'import' Identifier (',' Identifier)* ';'

<Definition>    ::= Doc? (Enum | Message | Interface)

<Enum>          ::= 'enum' Identifier '{' EnumValues '}'
<EnumValues>    :: = EnumValue (',' EnumValue)* ';'?
<EnumValue>     :: = Doc? Identifier

<Message>       ::= ('message' | 'exception') Identifier (':' Modifiers)? '{' Fields? '}'
<Fields>        ::= Field (';' Field)* ';'?
<Field>         ::= Doc? Identifier Type (',' Modifiers)?

<Interface>     ::= 'interface' Identifier (':' Modifiers)? '{' Method* '}'
<Method>        ::= Doc? Identifier '(' Fields? ')' Type (',' Modifiers) ';'

<Type>          ::= ValueType | ListType | SetType | MapType | DefType
<ValueType>     ::= 'bool'
                    | 'int16'
                    | 'int32
                    | 'int64'
                    | 'float'
                    | 'double'
                    | 'string'
                    | 'object'
                    | 'void'
<ListType>      ::= 'list' '<' Type '>'
<SetType>       ::= 'set' '<' Type '>'
<MapType>       ::= 'map' '<' Type ',' Type '>'
<DefType>       ::= Identifier

<Modifiers>     ::= Modifier (',' Modifier)*
<Modifier>      ::= Base | Throws | 'mutator' | 'obsolete' | 'discriminator'
<Base>          ::= DefType '(' DefType ')'
<Throws>        ::= 'throws' '(' DefType ')'

<Identifier>    ::= ( Letter | '_' ) ( Letter | Digit | '.' | '_' )*
<Letter>        ::= ['A'-'Z'] | ['a'-'z']
<Digit>         ::= ['0'-'9']
