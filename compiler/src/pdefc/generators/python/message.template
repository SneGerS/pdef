class {{ name }}({{ root_or_base }}):
{% if doc %}
    """{{ doc|indent(4) }}"""

{% endif -%}

{% if not fields %}
    def __init__(self):
{% else %}
    def __init__(self,
    {% for field in fields if not field.is_discriminator %}
                 {{ field.name }}=None
                 {%- if loop.last %}): {% else %}, {% endif %}

    {% else %}):
    {% endfor %}
{% endif %}

        {%- if inherited_fields %}
        super({{ name }}, self).__init__(
            {% for field in inherited_fields if not field.is_discriminator %}
            {{ field.name }}={{ field.name }}
            {%- if loop.last %}) {% else %}, {% endif %}

            {% endfor %}
        {% endif %}

        {%- if not declared_fields and not discriminator_value %}
        pass
        {% endif -%}

        {% for field in declared_fields %}
        self.{{ field.name }} = {% if field.is_discriminator -%}
            None
            {%- else -%}
            {{ field.name }}
            {%- endif %}

        {% endfor %}

        {%- if discriminator_value %}
        self.{{ discriminator.name }} = {{ discriminator_value }}
        {% endif %}

    DESCRIPTOR = pdef.descriptors.message(lambda: {{ name }},
    {% if base %}
        base={{ base.descriptor }},
        discriminator_value={{ discriminator_value.name if discriminator_value else None }},
    {% endif %}
    {% if subtypes %}
        subtypes=(
        {% for subtype in subtypes %}
            lambda: {{ subtype.descriptor }},
        {% endfor %}
        ),
    {% endif %}
    {% if declared_fields %}
        fields=(
        {% for field in declared_fields %}
            pdef.descriptors.field('{{ field.name }}', lambda: {{ field.type.descriptor }}
            {%- if field.is_discriminator -%}
                , is_discriminator=True
            {%- endif %}),
        {% endfor %}
        ),
    {% endif %}
    )
