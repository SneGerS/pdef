// {{ generated_by }}
package {{ package }};

import com.google.common.base.Supplier;

{% if doc %}
/** {{ doc }} */
{% endif %}
{% if not base -%}
    public interface {{ name }} {
{% else -%}
    public interface {{ name }} extends {{ base }} {
{% endif %}

{% for method in declared_methods %}
    {% if method.doc %}
    /** {{ method.doc|indent(4) }} */
    {% endif %}
    {{ method.result }} {{ method.name }}(
        {%- for arg in method.args -%}
                {{ arg.type }} {{ arg.name }}
                {%- if loop.length > 1 and not loop.last %}, {% endif %}
        {%- endfor %});

{% endfor %}
{% for method in declared_methods %}
    static final io.pdef.meta.InterfaceMethod {{ method.name|upper }}_METHOD =
            io.pdef.meta.InterfaceMethod.builder()
                    .setName("{{ method.name }}")
                    .setInvokerFrom({{ name }}.class)
                {% if method.is_index %}
                    .setIndex(true)
                {% endif %}
                {% if method.is_post %}
                    .setPost(true)
                {% endif %}
                {% if method.result.is_interface %}
                    .setResult(new Supplier<io.pdef.meta.MetaType>() {
                        public io.pdef.meta.MetaType get() {
                            return {{ method.result.meta }};
                        }
                    })
                {% else %}
                    .setResult({{ method.result.meta }})
                {% endif %}
                {% if exc %}
                    .setExc({{ exc.meta }})
                {% endif %}
                {% for arg in method.args %}
                    .addArg("{{ arg.name }}", {{ arg.type.meta }})
                {% endfor %}
                    .build();

{% endfor %}
    static io.pdef.meta.InterfaceType<{{ name }}> META_TYPE =
            io.pdef.meta.InterfaceType.<{{ name }}>builder()
                    .setJavaClass({{ name }}.class)
                {% if exc %}
                    .setExc({{ exc.meta }})
                {% endif %}
                {% for method in declared_methods %}
                    .addMethod({{ method.name|upper }}_METHOD)
                {% endfor %}
                    .build();
}

