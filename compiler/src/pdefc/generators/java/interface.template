// {{ generated_by }}
package {{ package }};

import com.google.common.base.Supplier;

import io.pdef.descriptors.ArgDescriptor;
import io.pdef.descriptors.DataDescriptor;
import io.pdef.descriptors.Descriptor;
import io.pdef.descriptors.Descriptors;
import io.pdef.descriptors.InterfaceDescriptor;
import io.pdef.descriptors.MethodDescriptor;
import io.pdef.descriptors.MessageDescriptor;

{% macro render_method(method) %}
            .addMethod(MethodDescriptor.builder()
                    .setName("{{ method.name }}")
                    {% if method.is_index %}
                    .setIndex(true)
                    {% endif %}
                    {% if method.is_post %}
                    .setPost(true)
                    {% endif %}
                    .setResult(new Supplier<Descriptor>() {
                        public Descriptor get() { return {{ method.result.descriptor }}; }
                    })
                    {% for arg in method.args %}
                    .addArg("{{ arg.name }}", new Supplier<DataDescriptor>() {
                        public DataDescriptor get () { return {{ arg.type.descriptor }}; }
                    })
                    {% endfor %}
            )
{% endmacro %}

{% if doc %}
/** {{ doc }} */
{% endif %}
{% if not base -%}
    public interface {{ name }} {
{% else -%}
    public interface {{ name }} extends {{ base }} {
{% endif %}

{% for method in declared_methods %}
    {% if method.doc %}
    /** {{ method.doc|indent(4) }} */
    {% endif %}
    {{ method.result }} {{ method.name }}(
        {%- for arg in method.args -%}
                {{ arg.type }} {{ arg.name }}
                {%- if loop.length > 1 and not loop.last %}, {% endif %}
        {%- endfor %});

{% endfor %}
    static InterfaceDescriptor DESCRIPTOR = InterfaceDescriptor.builder()
            .setCls({{ name }}.class)
            {% if exc %}
            .setExc(new Supplier<MessageDescriptor>() {
                public MessageDescriptor get() { return {{ exc.descriptor }}; }
            })
            {% endif %}
            {% for method in declared_methods -%}
            {{ render_method(method) }}
            {% endfor %}
            .build();
}

