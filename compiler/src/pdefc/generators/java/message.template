// {{ generated_by }}
package {{ package }};


{% if doc %}
/** {{ doc }} */
{% endif %}
public class {{ name }} extends {{ base_or_root }} {
    {% for field in declared_fields %}
    private {{ field.type }} {{ field.name }};
    {% endfor %}

{% if discriminator_value %}
    public {{ name }}() {
        this.{{ discriminator.set }}({{ discriminator_value }});
    }
{% else %}
    public {{ name }}() {}
{% endif %}

    public {{ name }}(final {{ name }} another) {
        super(another);
    {% for field in declared_fields %}
        {% if field.type.is_collection or field.type.is_message %}
        this.{{ field.name }} = io.pdef.Values.copy(another.{{ field.name }});
        {% else %}
        this.{{ field.name }} = another.{{ field.name }};
        {% endif %}
    {% endfor %}
    }

    public static {{ name }} fromMap(final java.util.Map<String, Object> map) {
        return io.pdef.formats.NativeFormat.getInstance().parse(map, DESCRIPTOR);
    }

    public static {{ name }} fromJson(final String s) {
        return io.pdef.formats.JsonFormat.getInstance().fromJson(s, DESCRIPTOR);
    }

{% for field in declared_fields %}
    // {{ field.name }}
    public {{ field.type.unboxed }} {{ field.get }}() {
    {% if field.type.is_collection or field.type.is_message %}
        return {{ field.name }} != null ? {{ field.name }} : ({{ field.name }} = {{ field.type.default }});
    {% else %}
        return {{ field.name }} != null ? {{ field.name }} : {{ field.type.default }};
    {% endif %}
    }

    public {{ name }} {{ field.set }}(final {{ field.type }} value) {
        this.{{ field.name }} = value;
        return this;
    }

    public boolean {{ field.present }}() {
        return {{ field.name }} != null;
    }

{% endfor %}
{% for field in inherited_fields %}
    // {{ field.name }}
    @Override
    public {{ name }} {{ field.set }}(final {{ field.type }} value) {
        super.{{ field.set }}(value);
        return this;
    }

{% endfor %}
    @Override
    public {{ name }} copy() {
        return new {{ name }}(this);
    }

    @Override
    public io.pdef.descriptors.MessageDescriptor<? extends {{ name }}> descriptor() {
        return DESCRIPTOR;
    }

    public static final io.pdef.descriptors.MessageDescriptor<{{ name }}> DESCRIPTOR = io.pdef.descriptors.ImmutableMessageDescriptor.<{{ name }}>builder()
            .setJavaClass({{ name }}.class)
            .setProvider(new io.pdef.Provider<{{ name }}>() {
                public {{ name }} get() {
                    return new {{ name }}();
                }
            })
            {% if base %}
            .setBase({{ base.descriptor }})
            {% endif %}
            {% if is_form %}
            .setForm(true)
            {% endif %}
            {% if discriminator_value %}
            .setDiscriminatorValue({{ discriminator_value }})
            {% endif %}
            {% for subtype in subtypes %}
            .addSubtype(new io.pdef.Provider<io.pdef.descriptors.MessageDescriptor<? extends {{ name }}>>() {
                public io.pdef.descriptors.MessageDescriptor<? extends {{ name }}> get() {
                    return {{ subtype.descriptor }};
                }
            })
            {% endfor %}
            {% for field in declared_fields %}
            .addField(io.pdef.descriptors.ImmutableFieldDescriptor.<{{ name }}, {{ field.type }}>builder()
                    .setName("{{ field.name }}")
                {% if field.is_discriminator %}
                    .setDiscriminator(true)
                {% endif %}
                {% if field.type.is_primitive %}
                    .setType({{ field.type.descriptor }})
                {% else %}
                    .setType(new io.pdef.Provider<io.pdef.descriptors.ValueDescriptor<{{ field.type }}>>() {
                        public io.pdef.descriptors.ValueDescriptor<{{ field.type }}> get() {
                            return {{ field.type.descriptor }};
                        }
                    })
                {% endif %}
                    .setAccessor(new io.pdef.descriptors.FieldAccessor<{{ name }}, {{ field.type }}>() {
                        public {{ field.type }} get({{ name }} message) {
                            return message.{{ field.name }};
                        }

                        public void set({{ name }} message, {{ field.type }} value) {
                            message.{{ field.name }} = value;
                        }
                    })
                    .build())
            {% endfor %}
            .build();
}

