// {{ generated_by }}
package {{ package }};

import com.google.common.base.Supplier;


{% if doc %}
/** {{ doc }} */
{% endif %}
public class {{ name }} extends {{ base_or_root }} {
    {% for field in declared_fields %}
    private {{ field.type }} {{ field.name }};
    {% endfor %}

{% if discriminator_value %}
    public {{ name }}() {
        this.{{ discriminator.set }}({{ discriminator_value }});
    }
{% else %}
    public {{ name }}() {}
{% endif %}

    public static {{ name }} parseFromMap(final java.util.Map<String, Object> map) {
        return io.pdef.format.NativeFormat.instance().parse(map, DESCRIPTOR);
    }

    public static {{ name }} parseFromJson(final String s) {
        return io.pdef.format.JsonFormat.instance().parse(s, DESCRIPTOR);
    }

{% for field in declared_fields %}
    // {{ field.name }}
    public {{ field.type.unboxed }} {{ field.get }}() {
        return {{ field.name }} != null ? {{ field.name }} : {{ field.type.default }};
    }

    public {{ name }} {{ field.set }}(final {{ field.type }} value) {
        this.{{ field.name }} = value;
        return this;
    }

    public boolean {{ field.present }}() {
        return {{ field.name }} != null;
    }

{% endfor %}
{% for field in inherited_fields %}
    // {{ field.name }}
    @Override
    public {{ name }} {{ field.set }}(final {{ field.type }} value) {
        super.{{ field.set }}(value);
        return this;
    }

{% endfor %}
    @Override
    public io.pdef.descriptors.MessageDescriptor<? extends {{ name }}> descriptor() {
        return DESCRIPTOR;
    }

{% for field in declared_fields %}
    public static final io.pdef.descriptors.FieldDescriptor<{{ name }}, {{ field.type }}> {{ field.name|upper }}_FIELD =
            io.pdef.descriptors.FieldDescriptor.<{{ name }}, {{ field.type }}>builder()
                    .setName("{{ field.name }}")
                {% if field.is_discriminator %}
                    .setDiscriminator(true)
                {% endif %}
                {% if field.type.is_primitive %}
                    .setType({{ field.type.descriptor }})
                {% else %}
                    .setType(new Supplier<io.pdef.descriptors.DataDescriptor<{{ field.type }}>>() {
                        public io.pdef.descriptors.DataDescriptor<{{ field.type }}> get() {
                            return {{ field.type.descriptor }};
                        }
                    })
                {% endif %}
                    .setAccessor(new io.pdef.descriptors.FieldAccessor<{{ name }}, {{ field.type }}>() {
                        public {{ field.type }} get({{ name }} message) {
                            return message.{{ field.name }};
                        }

                        public void set({{ name }} message, {{ field.type }} value) {
                            message.{{ field.name }} = value;
                        }
                    })
                    .build();

{% endfor %}

    public static final io.pdef.descriptors.MessageDescriptor<{{ name }}> DESCRIPTOR =
            io.pdef.descriptors.MessageDescriptor.<{{ name }}>builder()
                    .setJavaClass({{ name }}.class)
                    .setSupplier(new Supplier<{{ name }}>() {
                        public {{ name }} get() {
                            return new {{ name }}();
                        }
                    })
                    {% if base %}
                    .setBase({{ base.descriptor }})
                    {% endif %}
                    {% if is_form %}
                    .setForm(true)
                    {% endif %}
                    {% if discriminator_value %}
                    .setDiscriminatorValue({{ discriminator_value }})
                    {% endif %}
                    {% for subtype in subtypes %}
                    .addSubtype(new Supplier<io.pdef.descriptors.MessageDescriptor<? extends {{ name }}>>() {
                        public io.pdef.descriptors.MessageDescriptor<? extends {{ name }}> get() {
                            return {{ subtype.descriptor }};
                        }
                    })
                    {% endfor %}
                    {% for field in declared_fields %}
                    .addField({{ field.name|upper }}_FIELD)
                    {% endfor %}
                    .build();
}

