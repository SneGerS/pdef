// {{ generated_by }}
package {{ package }};

import com.google.common.base.Supplier;

import io.pdef.types.Type;
import io.pdef.types.Types;
import io.pdef.types.Message;
import io.pdef.types.MessageField;
import io.pdef.types.MessageType;


{% if doc %}
/** {{ doc }} */
{% endif %}
public class {{ name }} extends {{ base_or_root }} {
    {% for field in declared_fields %}
    private {{ field.type }} {{ field.name }};
    {% endfor %}

    public {{ name }}() {}

    public static {{ name }} parseMap(final java.util.Map<String, Object> map) {
        return ({{ name }}) classType().parseNative(map);
    }

    public static {{ name }} parseJson(final String s) {
        return ({{ name }}) classType().parseJson(s);
    }

{% for field in declared_fields %}
    public {{ field.type.unboxed }} {{ field.get }}() {
        return {{ field.name }} != null ? {{ field.name }} : {{ field.type.default }};
    }

    public {{ name }} {{ field.set }}(final {{ field.type }} value) {
        this.{{ field.name }} = value;
        return this;
    }

    public boolean {{ field.present }}() {
        return {{ field.name }} != null;
    }

{% endfor %}
{% for field in inherited_fields %}
    @Override
    public {{ name }} {{ field.set }}(final {{ field.type }} value) {
        super.{{ field.set }}(value);
        return this;
    }

{% endfor %}
    @Override
    public MessageType type() {
        return TYPE;
    }

    /** Returns a message type. */
    public static MessageType classType() {
        return TYPE;
    }
    
    private static final MessageType TYPE = MessageType.builder()
            .setJavaClass({{ name }}.class)
		    .setSupplier(new Supplier<Message>() {
			    public Message get() {
				    return new {{ name }}();
			    }
		    })
            {% if base %}
            .setBase({{ base.descriptor }})
            {% endif %}
            {% if is_form %}
            .setForm(true)
            {% endif %}
            {% if discriminator_value %}
            .setDiscriminatorValue({{ discriminator_value }})
            {% endif %}
            {% for subtype in subtypes %}
            .addSubtype(new Supplier<MessageType>() {
                public MessageType get() { return {{ subtype.descriptor }}; }
            })
            {% endfor %}
            {% for field in declared_fields %}
            .addField("{{ field.name }}", {{ field.is_discriminator }},
				    new Supplier<Type>() {
					    public Type get() {
						    return {{ field.type.descriptor }};
					    }
				    },
				    new MessageField.Getter() {
					    public Object get(final Object message) {
                            return (({{ name }}) message).{{ field.name }};
					    }
				    },
				    new MessageField.Setter() {
                        @SuppressWarnings("unchecked")
					    public void set(final Object message, final Object value) {
                            (({{ name }}) message).{{ field.name }} = ({{ field.type }}) value;
					    }
				    }
            )
            {% endfor %}
            .build();
}

