module pdef.test;

/** Test enum. */
enum TestEnum {
    ONE, TWO, THREE;
}

/** Test message with fields of all data types. */
message TestMessage {
    anEnum      TestEnum;
    aBool       bool;
    anInt16     int16;
    anInt32     int32;
    anInt64     int64;
    aFloat      float;
    aDouble     double;
    aString     string;

    aList       list<string>;
    aSet        set<string>;
    aMap        map<string, string>;

    aMessage    TestMessage;
    anObject    object;
}

/** Test simple message. */
message TestSimpleMessage {
    firstField  bool;
    secondField string;
    thirdField  TestSimpleMessage;
}

/** Test simple submessage. */
message TestSimpleSubmessage : TestSimpleMessage {
    forthField  float;
}

/** First inheritance tree types. */
enum TreeType {
    ONE, TWO
}

/** First inheritance tree. */
message Tree0 {
    type TreeType, discriminator;
}
message Tree1 : Tree0(TreeType.ONE) {}
message Tree2 : Tree1(TreeType.TWO) {}


exception TestException {
    text string;
}

exception TestException1 {
    code int32;
}

/** Test interface with method of all types. */
interface TestInterface : throws TestException {
    /** Void method w/o args. */
    void0() void;

    /** Camel-case method w/o args with a string result. */
    camelCase(firstArg string; secondArg string) string;

    /** Method which accepts and returns a message. */
    message0(msg TestMessage) TestMessage;

    /** Method which accepts and returns primitives. */
    sum(i0 int32; i1 int32) int32;

    /** Interface method. */
    interface0() TestInterface1;

    simple(msg TestSimpleMessage, query) TestSimpleMessage, post;
}

/** An interface returned as a sub interface in TestInterface. */
interface TestInterface1 {
    hello(firstName string; lastName string) string, post;
}

/** Interface inheritance tree. */
interface InterfaceTree0 : throws TestException {
    method0() string, index;
}

interface InterfaceTree1 : InterfaceTree0, throws TestException1 {
    method1() string, index, post;
}
