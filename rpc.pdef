module io.pdef.rpc;


enum MessageType {
    REQUEST, RESPONSE
}

/** Abstract rpc message which can be a request or a response. */
message Message {
    type    MessageType, discriminator;
}

/** Request with chained calls. */
message Request : Message(MessageType.REQUEST) {
    id      string; // Async request id.

    calls   list<MethodCall>;
}

/** Response. */
message Response : Message(MessageType.RESPONSE) {
    requestId   string; // Async request id.

    status      ResponseStatus;
    result      object; // Application specific result.
    exc         object; // Application specific exception.
    rpcExc      RpcException;
}

/** Response status. */
enum ResponseStatus {
    OK, ERROR, RPC_ERROR
}

/** Single method call in a call chain. */
message MethodCall {
    method  string;
    args    map<string, object>;
}

/** Rpc exception is raised when the server fails to process an RPC request. */
exception RpcException {
    code    RpcExceptionCode;
    text    string;
}

/** Rpc exception codes, most can be mapped to HTTP status codes. */
enum RpcExceptionCode {
    SERVER_ERROR, // An unhandled server error.
    SERVICE_UNAVAILABLE, // The service is temporarily unavailable.
    TIMEOUT,
    BAD_REQUEST // The request could not be understood by the server, more info should be
                // included in the exception text, possible causes are: a method is not found,
                // wrong arguments, deserialization failure, etc.
}
