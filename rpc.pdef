module io.pdef.rpc;


/** Request. */
message Request {
    calls   list<MethodCall>;
}

/** Response. */
message Response {
    status  ResponseStatus;
    result  object;
}

/** Response status. */
enum ResponseStatus {
    OK, ERROR, EXCEPTION
}

/** Single method call in a call chain. */
message MethodCall {
    method  string;
    args    map<string, object>;
}

/** Rpc exception is raised when the server fails to process an RPC request. */
exception RpcError {
    code    RpcErrorCode;
    text    string;
}

/** Rpc exception codes, most can be mapped to HTTP status codes. */
enum RpcErrorCode {
    SERVER_ERROR,           // An unhandled server error.
    SERVICE_UNAVAILABLE,    // The service is temporarily unavailable,
    TIMEOUT,                // Timeout.
    BAD_REQUEST            // The request could not be understood by the server.
}


// Asynchronous protocol.
enum AsyncType {
    REQUEST, RESPONSE
}

message AsyncMessage {
    type    AsyncType;
    id      string;     // An async request or response id, the response copies its request id.
    data    object;     // Request or Response messages depending on the message type.
}
