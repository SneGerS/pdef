module io.pdef.rpc;


/** Request. */
message Request {
    type    RequestType;
    calls   list<MethodCall>;
}

/** Response. */
message Response {
    status  ResponseStatus;
    result  object;
}

enum RequestType {
    ACCESSOR, MUTATOR;
}

/** Response status. */
enum ResponseStatus {
    OK, ERROR, EXCEPTION
}

/** Single method call in a call chain. */
message MethodCall {
    method  string;
    args    map<string, object>;
}

/** Rpc exception is raised when the server fails to process an RPC request. */
exception Error {
    code    ErrorCode;
    text    string;
}

/** Rpc exception codes, most can be mapped to HTTP status codes. */
enum ErrorCode {
    SERVER_ERROR,           // An unhandled server error.
    SERVICE_UNAVAILABLE,    // The service is temporarily unavailable,
    TIMEOUT,                // Timeout.
    BAD_REQUEST,            // The request could not be understood by the server.
    METHOD_NOT_FOUND,       // A method is not found.
    METHOD_CALLS_REQUIRED,  // The method calls are empty.
    DATA_METHOD_CALL_REQUIRED, // The last method must be a data method.
    DATA_METHOD_REACHED_NO_MORE_CALLS, // Method calls on data types are not supported.
    WRONG_METHOD_ARGUMENTS  // Wrong number or type of the method arguments.
}


// Asynchronous protocol.
enum AsyncType {
    REQUEST, RESPONSE
}

message AsyncMessage {
    type    AsyncType;
    id      string;     // An async request or response id, the response copies its request id.
    data    object;     // Request or Response messages depending on the message type.
}
