package {{ package }};
import io.pdef.fluent.FluentFuture;

{% macro iface_name(name) -%}
    {%- if async -%}
        {{ async_name }}
    {%- else -%}
        {{ name }}
    {%- endif -%}
{%- endmacro -%}

{% macro method_result(ref) -%}
    {%- if async -%}
        {%- if ref.is_interface -%}
            {{ ref.async_name }}
        {%- else -%}
            FluentFuture<{{ ref.boxed }}>
        {%- endif -%}
    {%- else -%}
        {{ ref }}
    {%- endif -%}
{%- endmacro -%}

{% macro iface_base(base) -%}
    {%- if async -%}
        {{ base.async_name }}
    {%- else -%}
        {{ base }}
    {%- endif -%}
{%- endmacro -%}

{% if doc %}
/** {{ doc }} */
{% endif %}
{% if not bases -%}
    public interface {{ iface_name(name) }} {
{% else -%}
    public interface {{ iface_name(name) }} extends {% for base in bases -%}
        {{ iface_base(base) }}
        {%- if loop.length > 1 and not loop.last %}, {% endif %}
{%- endfor %} {
{% endif %}

{% for method in declared_methods %}
    {% if method.doc -%}
    /** {{ method.doc|indent(4) }} */
    {% endif -%}
    {{ method_result(method.result) }} {{ method.name }}({% for arg, argtype in method.args -%}
                {{ argtype }} {{ arg }}
                {%- if loop.length > 1 and not loop.last %}, {% endif %}
        {%- endfor %});

{% endfor %}
    static io.pdef.InterfaceDescriptor<{{ name }}> DESCRIPTOR =
            new io.pdef.GeneratedInterfaceDescriptor<{{ name }}>({{ name }}.class) {
{% for method in methods %}
        private final io.pdef.MethodDescriptor {{ method.name }}Method;
{% endfor %}
        private final java.util.Map<String, io.pdef.MethodDescriptor> methods;

        {
{% for method in methods %}
            {{ method.name }}Method = methodBuilder("{{ method.name }}").build();
{% endfor %}
            methods = methodsToMap(
                    {% for method in methods %}{{ method.name }}Method
            {%- if loop.length > 1 and not loop.last %}, {% endif %}{% endfor %});
        }

		@Override
		public java.util.Map<String, io.pdef.MethodDescriptor> getMethods() {
			return methods;
		}
    };
}

