package {{ package }};

import com.google.common.base.Supplier;

import pdef.descriptors.ArgDescriptor;
import pdef.descriptors.Descriptor;
import pdef.descriptors.Descriptors;
import pdef.descriptors.InterfaceDescriptor;
import pdef.descriptors.MethodDescriptor;

{% macro render_method(method) %}
            .addMethod(MethodDescriptor.builder()
                    .setName("{{ method.name }}")
{% if method.is_post %}
                    .setPost(true)
{% endif %}
                    .setResult(new Supplier<Descriptor>() { public Descriptor get() { return {{ method.result.descriptor }}; } })
{% for arg in method.args %}
                    .addArg(ArgDescriptor.builder()
{% if arg.is_query %}
                            .setQuery(true)
{% endif %}
                            .setName("{{ arg.name }}")
                            .setType(new Supplier<Descriptor>() { public Descriptor get() { return {{ arg.type.descriptor }}; } }))
{% endfor %}
            )
{% endmacro %}

{% if doc %}
/** {{ doc }} */
{% endif %}
{% if not base -%}
    public interface {{ name }} {
{% else -%}
    public interface {{ name }} extends {{ base }} {
{% endif %}

{% for method in declared_methods %}
    {% if method.doc -%}
    /** {{ method.doc|indent(4) }} */
    {% endif -%}
    {{ method.result }} {{ method.name }}(
        {%- for arg in method.args -%}
                {{ arg.type }} {{ arg.name }}
                {%- if loop.length > 1 and not loop.last %}, {% endif %}
        {%- endfor %});

{% endfor %}
    static InterfaceDescriptor DESCRIPTOR = InterfaceDescriptor.builder()
            .setCls({{ name }}.class)
{% if exc %}
            .setExc(new Supplier<Descriptor>() { public Descriptor get() { return {{ exc.descriptor }}; } })
{% endif %}
{% for method in declared_methods %}
{{ render_method(method) }}
{% endfor %}
            .build();
}

