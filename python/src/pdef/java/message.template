package {{ package }};

public class {{ type }} extends {{ base_class }} {

{% for field in declared_fields %}
    private {{ field.type }} {{ field.name }};
{% endfor %}

    protected {{ name }}() {
        this(new {{ builder }}());
    }

    protected {{ name }}(final {{ builder }} builder) {
        super(builder);
{% for field in declared_fields %}
        if (builder.{{ field.is_set }}()) { this.{{ field.name }} = builder.{{ field.get }}(); }
{% endfor %}
    }

{% for field in declared_fields %}
    // {{ field.name }}
{% if field.type.nullable %}
    @javax.annotation.Nullable
{% endif %}
    public {{ field.type }} {{ field.get }}() {
        if (!{{ field.is_set }}()) {
            return {{ field.type.default }};
        }
        return {{ field.name }};
    }

    public boolean {{ field.is_set }}() {
        return _fields.get({{ field.index }});
    }

{% endfor %}
    @Override
    public pdef.MessageDescriptor getDescriptor() {
        return Descriptor.instance;
    }

    public static pdef.MessageDescriptor getClassDescriptor() {
        return Descriptor.instance;
    }

    private static final {{ type.wildcard }} instance = new {{ type.raw }}();

{% if is_generic %}
    @SuppressWarnings("unchecked")
    public static {{ getInstanceVars }} {{ type }} {{ getInstance }} {
        return ({{ type }}) instance;
    }
{% else %}
    public static {{ type }} {{ getInstance }} {
        return instance;
    }
{% endif %}

    public static class {{ builder }} extends {{ base_builder }} {
{% for field in declared_fields %}
        private {{ field.type }} {{ field.name }};
{% endfor %}

{% for field in declared_fields %}
        // {{ field.name }}
{% if field.type.nullable %}
        @javax.annotation.Nullable
{% endif %}
        public {{ field.type }} {{ field.get }}() {
            if (!{{ field.is_set }}()) {
                return {{ field.type.default }};
            }
            return {{ field.name }};
        }

        public boolean {{ field.is_set }}() {
            return _fields.get({{ field.index }});
        }

        public {{ builder }} {{ field.set }}(final {{ field.type }} value) {
            this.{{ field.name }} = value;
            _fields.set({{ field.index }});
            return this;
        }

        public {{ builder }} {{ field.clear }}() {
            this.{{ field.name }} = {{ field.type.default }};
            _fields.clear({{ field.index }});
            return this;
        }

{% endfor %}
        @Override
        public {{ type }} build() {
            return new {{ type }}(this);
        }

        @Override
        public pdef.MessageDescriptor getDescriptor() {
            return Descriptor.instance;
        }
    }

    public static class Descriptor extends pdef.generated.GeneratedMessageDescriptor {
        private static final Descriptor instance = new Descriptor();
{% if variables %}

{% for var in variables %}
        private final pdef.VariableDescriptor variable{{ var }};
{% endfor %}
        private final pdef.SymbolTable<pdef.VariableDescriptor> variables;
{% endif %}
{% if base %}

        private pdef.MessageDescriptor base;
        private Enum<?> baseType;
{% endif %}
{% if is_polymorphic %}

        private Enum<?> defaultType;
        private pdef.FieldDescriptor typeField;
        private java.util.Map<Enum<?>, pdef.MessageDescriptor> subtypes;
{% endif %}

{% for field in declared_fields %}
        private pdef.FieldDescriptor {{ field.name }}Field;
{% endfor %}
        private pdef.SymbolTable<pdef.FieldDescriptor> declaredFields;

        protected Descriptor() {
            super({{ name }}.class);
{% if variables %}
{% for var in variables %}
            variable{{ var }} = new pdef.provided.NativeVariableDescriptor("{{ var.name }}");
{% endfor %}
            variables = pdef.ImmutableSymbolTable.of(
{% for var in variables %}
                    variable{{ var.name }}{% if not loop.last and loop.length > 1 %}, {% endif %}

{% endfor %}
            );
{% endif %}
        }
{% if base %}
        @Override
        public pdef.MessageDescriptor getBase() {
            return base;
        }

        @Override
        public Enum<?> getBaseType() {
            return baseType;
        }

{% endif %}
{% if variables %}
        @Override
        public pdef.SymbolTable<pdef.VariableDescriptor> getVariables() {
            return variables;
        }

{% endif %}
        @Override
        public pdef.SymbolTable<pdef.FieldDescriptor> getDeclaredFields() {
            return declaredFields;
        }

{% if is_polymorphic %}

        @Override
        public pdef.FieldDescriptor getTypeField() {
            return typeField;
        }

        @Override
        public Enum<?> getDefaultType() {
            return defaultType;
        }

        @Override
        public java.util.Map<Enum<?>, pdef.MessageDescriptor> getSubtypes() {
            return subtypes;
        }
{% endif %}

        @Override
        protected void init() {
{% if base %}
            base = {{ base.descriptor|indent(16) }};
            baseType = {{ base_type }};

{% endif %}
{% for field in declared_fields %}
            {{ field.name }}Field = new pdef.generated.GeneratedFieldDescriptor("{{ field.name }}",
                    {{ field.type.descriptor|indent(24) }}) {
                @Override
                public Object get(final pdef.Message message) {
                    return (({{ name }}) message).{{ field.get }}();
                }

                @Override
                public Object get(final pdef.Message.Builder builder) {
                    return ((Builder) builder).{{ field.get }}();
                }

                @Override
                public boolean isSet(final pdef.Message message) {
                    return (({{ name }}) message).{{ field.is_set }}();
                }

                @Override
                public boolean isSet(final pdef.Message.Builder builder) {
                    return ((Builder) builder).{{ field.is_set }}();
                }

{% if field.type.generic %}
                @SuppressWarnings("unchecked")
{% endif %}
                @Override
                public void set(final pdef.Message.Builder builder, final Object value) {
                    if (value == null) {
                        clear(builder);
                    } else {
                        ((Builder) builder).{{ field.set }}(({{ field.type.boxed.raw }}) value);
                    }
                }

                @Override
                public void clear(final pdef.Message.Builder builder) {
                    ((Builder) builder).{{ field.clear }}();
                }
            };

{% endfor %}
            declaredFields = pdef.ImmutableSymbolTable.of(
{% for field in declared_fields %}
                    {{ field.name }}Field{% if not loop.last and loop.length > 1 %}, {% endif %}

{% endfor %}
            );
{% if is_polymorphic %}

            typeField = {{ type_field.name }}Field;
            defaultType = {{ default_type }};
            subtypes = com.google.common.collect.ImmutableMap.<Enum<?>, pdef.MessageDescriptor>builder()
            {% for enum_value, message in subtypes %}
                    .put({{ enum_value }}, {{ message.descriptor }})
            {% endfor %}
                    .build();
{% endif %}
        }

        static {
            instance.link();
        }
    }
}
