package {{ package }};

public class {{ type }} extends {{ base_class }} {
	private static final {{ type.wildcard }} defaultInstance = new {{ type.raw }}();

	public static {{ type.wildcard }} getDefaultInstance() {
		return defaultInstance;
	}

{% for field in declared_fields %}
    private final {{ field.type }} {{ field.name }};
{% endfor %}

	protected {{ name }}() {
	    this(new {{ builder }}());
	}

	protected {{ name }}(final {{ builder }} builder) {
		super(builder);
{% for field in declared_fields %}
        this.{{ field.name }} = builder.{{ field.getter }}();
{% endfor %}
	}

{% for field in declared_fields %}
    public {{ field.type }} {{ field.getter }}() {
        return {{ field.name }};
    }

{% endfor %}
	@Override
	public pdef.MessageDescriptor getDescriptor() {
	    return Descriptor.instance;
	}

    public static pdef.MessageDescriptor getClassDescriptor() {
        return Descriptor.instance;
    }

	public static class {{ builder }} extends {{ base_builder }} {
{% for field in declared_fields %}
        private {{ field.type }} {{ field.name }};
{% endfor %}

{% for field in declared_fields %}
        public {{ field.type }} {{ field.getter }}() {
            return {{ field.name }};
        }

        public {{ builder }} {{ field.setter }}(final {{ field.type }} value) {
            this.{{ field.name }} = value;
            return this;
        }

        public {{ builder }} {{ field.clearer }}() {
            this.{{ field.name }} = {{ field.type.default }};
            return this;
        }

{% endfor %}
		@Override
		public {{ type }} build() {
		    return new {{ type }}(this);
		}

		@Override
		public pdef.MessageDescriptor getDescriptor() {
		    return Descriptor.instance;
		}
	}

	public static class Descriptor extends pdef.generated.GeneratedMessageDescriptor {
		private static final Descriptor instance = new Descriptor();

{% for var in variables %}
        private final pdef.VariableDescriptor variable{{ var }};
{% endfor %}
        private final pdef.SymbolTable<pdef.VariableDescriptor> variables;

{% if base %}
        private pdef.MessageDescriptor base;
        private Enum<?> baseType;

{% endif %}
{% if is_polymorphic %}
        private Enum<?> defaultType;
        private pdef.FieldDescriptor typeField;
        private java.util.Map<Enum<?>, pdef.MessageDescriptor> subtypes;
{% endif %}

{% for field in declared_fields %}
        private pdef.FieldDescriptor {{ field.name }}Field;
{% endfor %}
		private pdef.SymbolTable<pdef.FieldDescriptor> declaredFields;

		protected Descriptor() {
		    super({{ name }}.class);
{% for var in variables %}
            variable{{ var }} = new NativeVariableDescriptor("{{ var.name }}");
{% endfor %}
            variables = pdef.ImmutableSymbolTable.of(
{% for var in variables %}
                    variable{{ var.name }}{% if not loop.last and loop.length > 1 %}, {% endif %}

{% endfor %});
		}
{% if base %}
		@Override
        public pdef.MessageDescriptor getBase() {
            return base;
        }

        @Override
        public Enum<?> getBaseType() {
            return baseType;
        }

{% endif %}
		@Override
        public pdef.SymbolTable<pdef.VariableDescriptor> getVariables() {
            return variables;
        }

		@Override
		public pdef.SymbolTable<pdef.FieldDescriptor> getDeclaredFields() {
		    return declaredFields;
		}
{% if is_polymorphic %}

        @Override
        public pdef.FieldDescriptor getTypeField() {
            return typeField;
        }

        @Override
        public Enum<?> getDefaultType() {
            return defaultType;
        }

        @Override
        public java.util.Map<Enum<?>, pdef.MessageDescriptor> getSubtypes() {
            return subtypes;
        }
{% endif %}

		@Override
		protected void init() {
		    base = {% if base %}{{ base.descriptor|indent(16) }}{% else %}null{% endif %};
		    baseType = {% if base_type %}{{ base_type }}{% else %}null{% endif %};

            {% for field in declared_fields %}
			{{ field.name }}Field = new pdef.generated.GeneratedFieldDescriptor("{{ field.name }}",
			        {{ field.type.descriptor|indent(24) }}) {
				@Override
				public Object get(final pdef.Message message) {
					return (({{ name }}) message).{{ field.getter }}();
				}

				@Override
				public Object get(final pdef.Message.Builder builder) {
					return ((Builder) builder).{{ field.getter }}();
				}

				@Override
				public void set(final pdef.Message.Builder builder, final Object value) {
				    if (value == null) {
				        clear(builder);
				    } else {
					    ((Builder) builder).{{ field.setter }}(({{ field.type.boxed }}) value);
					}
				}

				@Override
				public void clear(final pdef.Message.Builder builder) {
				    ((Builder) builder).{{ field.clearer }}();
				}
			};

            {% endfor %}
			declaredFields = pdef.ImmutableSymbolTable.of(
            {% for field in declared_fields %}
                    {{ field.name }}Field{% if not loop.last and loop.length > 1 %}, {% endif %}

            {% endfor %});
            {% if is_polymorphic %}

            typeField = {{ type_field.name }}Field;
            defaultType = {{ default_type }};
            subtypes = com.google.common.collect.ImmutableMap.<Enum<?>, pdef.MessageDescriptor>builder()
            {% for enum_value, message in subtypes %}
                    .put({{ enum_value }}, {{ message.descriptor }})
            {% endfor %}
                    .build();
            {% endif %}
		}

		static {
			instance.link();
		}
	}
}
