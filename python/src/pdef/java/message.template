package {{ package }};

{% if subtypes %}
@io.pdef.TypeField("{{ subtypes.field.name }}")
@io.pdef.Subtypes({
{% for type, submessage in subtypes.items %}
        @io.pdef.Subtype(type = "{{ type }}", value = {{ submessage }}.class){% if loop.length > 1 and not loop.last %}, {% endif %}

{% endfor %}
})
{% endif %}
public class {{ name }} extends {% if base_class -%}
    {{ base_class }}
    {%- elif is_exception -%}io.pdef.GeneratedException
    {%- else -%}io.pdef.GeneratedMessage{%- endif %} {
    private static final {{ name }} instance = new {{ name }}();

{% if declared_fields %}
{% for field in declared_fields %}
    protected {{ field.type }} {{ field.name }};
{% endfor %}
{% endif %}

    public {{ name }}() {
        this(new Builder());
    }

    public {{ name }}(final Builder builder) {
        super(builder);
{% for field in declared_fields %}
        this.{{ field.name }} = builder.{{ field.get }}();
{% endfor %}
    }

{% for field in declared_fields %}
{% if field.type.nullable %}
    @javax.annotation.Nullable
{% endif %}
    public {{ field.type }} {{ field.get }}() {
{% if not field.type.primitive %}
        if ({{ field.name }} == null) return {{ field.type.default }};
{% endif %}
        return {{ field.name }};
    }

    public boolean {{ field.present }}() {
{% if field.type.primitive %}
        return true;
{% else %}
        return {{ field.name }} != null;
{% endif %}
    }

{% endfor %}
    @Override
    public Builder newBuilderForType() {
        return builder();
    }

    @Override
    public Builder toBuilder() {
        Builder builder = newBuilderForType();
        fill(builder);
        return builder;
    }

    protected void fill(Builder builder) {
        super.fill(builder);
{% for field in declared_fields %}
{% if not field.is_type %}
        builder.{{ field.set }}(this.{{ field.name }});
{% endif %}
{% endfor %}
    }

    public static {{ name }} getInstance() {
        return instance;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends {% if base_builder -%}{{ base_builder }}
        {%- elif is_exception -%}io.pdef.GeneratedException.Builder
        {%- else -%}io.pdef.GeneratedMessage.Builder{%- endif %} {
{% for field in declared_fields %}
        protected {{ field.type }} {{ field.name }};
{% endfor %}

        public Builder() {
{% for field in fields %}
{% if field.is_type or field.is_subtype %}
            this.{{ field.name }} = {{ field.type_value }};
{% endif %}
{% endfor %}
        }

{% for field in fields %}
{% if field.is_declared %}
{% if field.type.nullable %}
        @javax.annotation.Nullable
{% endif %}
        public {{ field.type }} {{ field.get }}() {
{% if not field.type.primitive %}
            if ({{ field.name }} == null ) return {{ field.type.default }};
{% endif %}
            return {{ field.name }};
        }

        public Builder {{ field.set }}(final {{ field.type }} value) {
            this.{{ field.name }} = value;
            return this;
        }

        public Builder {{ field.clear }}() {
{% if field.type.primitive %}
            this.{{ field.name }} = {{ field.type.default }};
{% else %}
            this.{{ field.name }} = null;
{% endif %}
            return this;
        }

        public boolean {{ field.present }}() {
{% if field.type.primitive %}
            return true;
{% else %}
            return {{ field.name }} != null;
{% endif %}
        }

{% else %}
        @Override
        public Builder {{ field.set }}(final {{ field.type }} value) {
            super.{{ field.set }}(value);
            return this;
        }

        @Override
        public Builder {{ field.clear }}() {
            super.{{ field.clear }}();
            return this;
        }

{% endif %}

{% endfor %}
        @Override
        public {{ name }} build() {
            return new {{ name }}(this);
        }


        @Override
        public String toString() {
            return com.google.common.base.Objects.toStringHelper(this)
{% for field in fields %}
                    .add("{{ field.name }}", {{ field.name }})
{% endfor %}
                    .toString();
        }
    }

    @Override
    public String toString() {
        return com.google.common.base.Objects.toStringHelper(this)
{% for field in fields %}
                .add("{{ field.name }}", {{ field.name }})
{% endfor %}
                .toString();
    }

	@Override
	public boolean equals(final Object o) {
{% if not declared_fields %}
        return super.equals(o);
{% else %}
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
{% if base_class %}
		if (!super.equals(o)) return false;
{% endif %}

		{{ name }} cast = ({{ name }}) o;

{% for field in declared_fields %}
{% if field.type.primitive %}
        if (this.{{ field.name }} != cast.{{ field.name }}) return false;
{% else %}
        if (this.{{ field.name }} != null ? !this.{{ field.name }}.equals(cast.{{ field.name }}) : cast.{{ field.name }} != null) return false;
{% endif %}
{% endfor %}

		return true;
{% endif %}
	}

	@Override
	public int hashCode() {
{% if not declared_fields %}
        return super.hashCode();
{% else %}
{% if base_class %}
		int result = super.hashCode();
{% else %}
        int result = 31;
{% endif %}
        return com.google.common.base.Objects.hashCode(result,
                {% for field in declared_fields -%}this.{{ field.name }}
                {%- if loop.length > 1 and not loop .last -%}
                , {% endif %}{%- endfor %});
{% endif %}
	}
}

