package {{ package }};

import com.google.common.base.Supplier;

import pdef.descriptors.Descriptor;
import pdef.descriptors.Descriptors;
import pdef.descriptors.FieldDescriptor;
import pdef.descriptors.MessageDescriptor;

{% macro message_field_from_builder(field) -%}
        {% if field.type.is_list -%}
            this.{{ field.name }} = builder.{{ field.name }} == null ? null
                : com.google.common.collect.ImmutableList.copyOf(builder.{{ field.name }});
        {%- elif field.type.is_set -%}
            this.{{ field.name }} = builder.{{ field.name }} == null ? null
                : com.google.common.collect.ImmutableSet.copyOf(builder.{{ field.name }});
        {%- elif field.type.is_map -%}
            this.{{ field.name }} = builder.{{ field.name }} == null ? null
                : com.google.common.collect.ImmutableMap.copyOf(builder.{{ field.name }});
        {%- else -%}
            this.{{ field.name }} = builder.{{ field.name }};
        {%- endif %}
{%- endmacro %}

{% if doc %}
/** {{ doc }} */
{% endif %}
public class {{ name }} extends {{ base_or_root }} {
    {% for field in declared_fields %}
    protected {{ field.type }} {{ field.name }};
    {% endfor %}

    public {{ name }}() {
        this(builder()); {# To correctly set base type fields. #}

    }

    protected {{ name }}(final Builder builder) {
        super(builder);
        {% for field in declared_fields %}
        {{ message_field_from_builder(field) }}
        {% endfor %}
    }

    {% for field in declared_fields %}
    public {{ field.type.unboxed }} {{ field.get }}() {
        return {{ field.name }} != null ? {{ field.name }} : {{ field.type.default }};
    }

    public boolean {{ field.present }}() {
        return {{ field.name }} != null;
    }

    {% endfor %}
    @Override
    public Builder toBuilder() {
        return builder().merge(this);
    }

    @Override
    public Builder builderForType() {
        return builder();
    }

    @Override
    public MessageDescriptor descriptorForType() {
        return descriptor();
    }

    public static {{ name }} parseMap(final java.util.Map<String, Object> map) {
        return ({{ name }}) descriptor().parseObject(map);
    }

    public static {{ name }} parseJson(final String s) {
        return ({{ name }}) descriptor().parseJson(s);
    }

    public static class Builder extends {{ base_or_root }}.Builder {
        {% for field in declared_fields %}
        protected {{ field.type }} {{ field.name }};
        {% endfor %}

        protected Builder() {
            super();
            {% if discriminator_value %}
            this.{{ discriminator.name }} = {{ discriminator_value }};
            {% endif %}
        }

        public Builder merge(final pdef.Message message) {
            super.merge(message);
            {{ name }} msg = ({{ name }}) message;
            {% for field in declared_fields %}
            {% if not field.is_discriminator %}
            if (msg.{{ field.name }} != null) this.{{ field.name }} = msg.{{ field.name }};
            {% endif %}
            {% endfor %}
            return this;
        }

        {% for field in declared_fields %}
        public {{ field.type.unboxed }} {{ field.get }}() {
            return {{ field.name }} != null ? {{ field.name }} : {{ field.type.default }};
        }

        public Builder {{ field.set }}(final {{ field.type }} value) {
            this.{{ field.name }} = value;
            return this;
        }

        public boolean {{ field.present }}() {
            return {{ field.name }} != null;
        }

        {% endfor %}
        {% for field in inherited_fields %}
        @Override
        public Builder {{ field.set }}(final {{ field.type }} value) {
            super.{{ field.set }}(value);
            return this;
        }

        {% endfor %}
        @Override
        public {{ name }} build() {
            return new {{ name }}(this);
        }
    }

    public static Builder builder() {
        return new Builder();
    }

    public static {{ name }} instance() {
        return INSTANCE;
    }

    public static MessageDescriptor descriptor() {
        return DESCRIPTOR;
    }
    
    private static final {{ name }} INSTANCE = new {{ name }}();
    private static final MessageDescriptor DESCRIPTOR = MessageDescriptor.builder()
            {% if base %}
            .setBase({{ base.descriptor }})
            {% endif %}
            {% if discriminator_value %}
            .setBaseType({{ discriminator_value }})
            {% endif %}
            {% for subtype in subtypes %}
            .addSubtype(new Supplier<MessageDescriptor>() { public MessageDescriptor get() { return {{ subtype.descriptor }}; } })
            {% endfor %}
            {% for field in declared_fields %}
            .addField(FieldDescriptor.builder()
                    .setName("{{ field.name }}")
                    {% if field.is_discriminator %}
                    .setDiscriminator(true)
                    {% endif %}
                    .setType(new Supplier<Descriptor>() { public Descriptor get() { return {{ field.type.descriptor }}; } })
                    .setAccessor(new FieldDescriptor.Accessor() {
                        public Object get(final Object message) {
                            return (({{ name }}) message).{{ field.name }};
                        }
                        @SuppressWarnings("unchecked")
                        public void set(final Object builder, final Object value) {
                            ((Builder) builder).{{ field.name }} = ({{ field.type }}) value;
                        }
                    }))
            {% endfor %}
            .setBuilder(new Supplier<Builder>() { public Builder get() { return builder(); } })
            .build();
}

