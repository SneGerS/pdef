package {{ package }};

{% if doc %}
/** {{ doc }} */
{% endif %}
public class {{ name }} extends {{ base }} {
{% for field in declared_fields %}
    protected {{ field.type }} {{ field.name }};
{% endfor %}

    public {{ name }}() {}

    public {{ name }}(final Builder builder) {
        super(builder);
{% for field in declared_fields %}
        {% if field.type.is_list -%}
            this.{{ field.name }} = builder.{{ field.name }} == null ? null
                : com.google.common.collect.ImmutableList.copyOf(builder.{{ field.name }});
        {%- elif field.type.is_set -%}
            this.{{ field.name }} = builder.{{ field.name }} == null ? null
                : com.google.common.collect.ImmutableSet.copyOf(builder.{{ field.name }});
        {%- elif field.type.is_map -%}
            this.{{ field.name }} = builder.{{ field.name }} == null ? null
                : com.google.common.collect.ImmutableMap.copyOf(builder.{{ field.name }});
        {%- else -%}
            this.{{ field.name }} = builder.{{ field.name }};
        {%- endif %}

{% endfor %}
    }

    protected {{ name }}(final java.util.Map<?, ?> map) {
        super(map);
{% for field in declared_fields %}
        this.{{ field.name }} = {{ field.type.parse }}(map.get("{{ field.name }}"));
{% endfor %}
    }
    
    public static {{ name }} parse(final Object object) {
        if (object == null) return null;
        return parse((java.util.Map<?, ?>) object);
    }
    
    public static {{ name }} parse(final java.util.Map<?, ?> map) {
{% if subtypes %}
        {{ discriminator.type }} type = {{ discriminator.type.parse }}(map.get("{{ discriminator.name }}"));
        if (type != null) {
            switch (type) {
{% for type, cls in subtypes %}
                case {{ type }}: return {{ cls.parse }}(map);
{% endfor %}
            }
        }
{% endif %}
        return new {{ name }}(map);
    }

    public static {{ name }} parseFromJson(final String s) {
        Object object = io.pdef.Json.parse(s);
        return parse(object);
    }

{% for field in declared_fields %}
{% if field.type.is_nullable%}
    @javax.annotation.Nullable
{% endif %}
    public {{ field.type }} {{ field.get }}() {
        {% if field.type.is_primitive -%}
            return {{ field.name }};
        {%- else -%}
            return {{ field.name }} != null ? {{ field.name }} : {{ field.type.default }};
        {%- endif %}

    }

    public boolean {{ field.present }}() {
        {% if field.type.is_primitive -%}
            return true;
        {%- else -%}
            return {{ field.name }} != null;
        {%- endif %}

    }

{% endfor %}
    @Override
    public java.util.Map<String, Object> serialize() {
        java.util.Map<String, Object> map = super.serialize();
{% for field in declared_fields %}
        if ({{ field.present }}()) map.put("{{ field.name }}", {{ field.type.serialize }}(this.{{ field.name }}));
{% endfor %}
        return map;
    }

    @Override
    public Builder toBuilder() {
        return new Builder(this);
    }

    @Override
    public Builder builderForType() {
        return builder();
    }
    
    @Override
    public io.pdef.Descriptor<? extends {{ name }}> descriptorForType() {
        return DESCRIPTOR;
    }

    public static java.util.Map<String, Object> serialize(final {{ name }} object) {
        return object == null ? null : object.serialize();
    }

    public static class Builder extends {{ base }}.Builder {
{% for field in declared_fields %}
        protected {{ field.type }} {{ field.name }};
{% endfor %}

{% if not base_type %}
        protected Builder() {}
{% else %}
        protected Builder() {
            super({{ base_type }});
        }
{% endif %}

        protected Builder(final {{ name }} message) {
            super(message);
            {% for field in declared_fields -%}
                this.{{ field.name }} = message.{{ field.name }};
            {% endfor %}

        }
{% if discriminator %}

        protected Builder(final {{ discriminator.type }} {{ discriminator.name }}) {
            this();
            this.{{ discriminator.name }} = {{ discriminator.name }};
        }
{% endif %}

{% for field in declared_fields %}
        {% if field.type.nullable -%} @javax.annotation.Nullable {%- endif -%}
        public {{ field.type }} {{ field.get }}() {
            {% if field.type.is_primitive -%}
                return {{ field.name }};
            {%- else -%}
                return {{ field.name }} != null ? {{ field.name }} : {{ field.type.default }};
            {%- endif %}

        }

        public Builder {{ field.set }}(final {{ field.type }} value) {
            this.{{ field.name }} = value;
            return this;
        }

        public Builder {{ field.clear }}() {
            {% if field.type.is_primitive -%}
                this.{{ field.name }} = {{ field.type.default }};
            {%- else -%}
                this.{{ field.name }} = null;
            {%- endif %}

            return this;
        }

        public boolean {{ field.present }}() {
            {% if field.type.is_primitive -%}
                return true;
            {%- else -%}
                return {{ field.name }} != null;
            {%- endif %}

        }

{% endfor %}
{% for field in inherited_fields %}
        @Override
        public Builder {{ field.set }}(final {{ field.type }} value) {
            super.{{ field.set }}(value);
            return this;
        }

        @Override
        public Builder {{ field.clear }}() {
            super.{{ field.clear }}();
            return this;
        }

{% endfor %}
        @Override
        public {{ name }} build() {
            return new {{ name }}(this);
        }

        @Override
        public String toString() {
            return com.google.common.base.Objects.toStringHelper(this)
{% for field in fields %}
                    .add("{{ field.name }}", {{ field.name }})
{% endfor %}
                    .toString();
        }

        @Override
        public boolean equals(final Object o) {
            {% if not declared_fields -%}
                return super.equals(o);
            {% else %}
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            if (!super.equals(o)) return false;
            {{ name }} cast = ({{ name }}) o;

            {% for field in declared_fields -%}
            {% if field.type.is_primitive -%}
                if (this.{{ field.name }} != cast.{{ field.name }}) return false;
            {%- else -%}
                if (this.{{ field.name }} != null
                    ? !this.{{ field.name }}.equals(cast.{{ field.name }})
                    : cast.{{ field.name }} != null) return false;
            {%- endif %}

            {% endfor %}

            return true;
            {% endif %}

        }

        @Override
        public int hashCode() {
            {% if not declared_fields -%}
                return super.hashCode();
            {%- else -%}
            int result = super.hashCode();
            return com.google.common.base.Objects.hashCode(result,
                    {% for field in declared_fields -%}this.{{ field.name }}
                    {%- if loop.length > 1 and not loop.last -%}, {% elif loop.last %}); {% endif %}

                    {% endfor %}
            {%- endif %}

        }
    }

    @Override
    public String toString() {
        return com.google.common.base.Objects.toStringHelper(this)
{% for field in fields %}
                .add("{{ field.name }}", {{ field.name }})
{% endfor %}
                .toString();
    }

    @Override
    public boolean equals(final Object o) {
{% if not declared_fields %}
        return super.equals(o);
{% else %}
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        if (!super.equals(o)) return false;
        {{ name }} cast = ({{ name }}) o;

{% for field in declared_fields %}
        {% if field.type.is_primitive -%}
            if (this.{{ field.name }} != cast.{{ field.name }}) return false;
        {%- else -%}
            if (this.{{ field.name }} != null
                ? !this.{{ field.name }}.equals(cast.{{ field.name }})
                : cast.{{ field.name }} != null) return false;
        {%- endif %}

{% endfor %}

        return true;
{% endif %}
    }

    @Override
    protected int generateHashCode() {
        {% if not declared_fields -%}
            return super.generateHashCode();
        {%- else -%}
        int result = super.generateHashCode();
        return com.google.common.base.Objects.hashCode(result,
                {% for field in declared_fields -%}this.{{ field.name }}
                {%- if loop.length > 1 and not loop.last -%}, {% elif loop.last %}); {% endif %}

                {% endfor %}
        {%- endif %}

    }

    public static Builder builder() {
        return new Builder();
    }

    public static {{ name }} instance() {
        return INSTANCE;
    }
    
    private static final {{ name }} INSTANCE = new {{ name }}();
    public static final io.pdef.Descriptor<{{ name }}> DESCRIPTOR =
            new io.pdef.Descriptor<{{ name }}>() {
                @Override
                public Class<{{ name }}> getJavaClass() {
                    return {{ name }}.class;
                }

                @Override
                public {{ name }} getDefault() {
                    return {{ name }}.instance();
                }

                @Override
                public {{ name }} parse(final Object object) {
                    return {{ name }}.parse(object);
                }

                @Override
                public Object serialize(final {{ name }} value) {
                    return {{ name }}.serialize(value);
                }
            };
}

