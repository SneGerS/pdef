package {{ package }};

public class {{ name }} extends {{ base_class }} {
    private static final {{ name }} instance = new {{ name }}();

{% if declared_fields %}
{% for field in declared_fields %}
    private {{ field.type }} {{ field.name }};
{% endfor %}
{% endif %}

    public {{ name }}() {
        this(new Builder());
    }

    public {{ name }}(final Builder builder) {
        super(builder);
{% for field in declared_fields %}
        this.{{ field.name }} = builder.{{ field.get }}();
{% endfor %}
    }

{% for field in declared_fields %}
{% if field.type.nullable %}
    @javax.annotation.Nullable
{% endif %}
    public {{ field.type }} {{ field.get }}() {
{% if not field.type.primitive %}
        if ({{ field.name }} == null ) return {{ field.type.default }};
{% endif %}
        return {{ field.name }};
    }

{% endfor %}
    @Override
    public Builder newBuilderForType() {
        return builder();
    }

    @Override
    public Builder toBuilder() {
        Builder builder = newBuilderForType();
        fill(builder);
        return builder;
    }

    protected void fill(Builder builder) {
        super.fill(builder);
{% for field in declared_fields %}
{% if not field.is_type %}
        builder.{{ field.set }}(this.{{ field.name }});
{% endif %}
{% endfor %}
    }

    public static {{ name }} getInstance() {
        return instance;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends {{ base_builder }} {
{% for field in declared_fields %}
        protected {{ field.type }} {{ field.name }};
{% endfor %}

        protected Builder() {
{% for field in fields %}
{% if field.is_type or field.is_subtype %}
            this.{{ field.name }} = {{ field.type_value }};
{% endif %}
{% endfor %}
        }

{% for field in fields %}
{% if field.is_declared %}
{% if field.type.nullable %}
        @javax.annotation.Nullable
{% endif %}
        public {{ field.type }} {{ field.get }}() {
{% if not field.type.primitive %}
            if ({{ field.name }} == null ) return {{ field.type.default }};
{% endif %}
            return {{ field.name }};
        }

        public Builder {{ field.set }}(final {{ field.type }} value) {
{% if field.is_type %}
            throw new UnsupportedOperationException(
                    "The field \"{{ field.name }}\" is a read-only type field");
{% else %}
            this.{{ field.name }} = value;
            return this;
{% endif %}
        }

        public Builder {{ field.clear }}() {
{% if field.is_type %}
            throw new UnsupportedOperationException(
                    "The field \"{{ field.name }}\" is a read-only type field");
{% else %}
            this.{{ field.name }} = {{ field.type.default }};
            return this;
{% endif %}
        }

{% else %}
        @Override
        public Builder {{ field.set }}(final {{ field.type }} value) {
            super.{{ field.set }}(value);
            return this;
        }

        @Override
        public Builder {{ field.clear }}() {
            super.{{ field.clear }}();
            return this;
        }

{% endif %}

{% endfor %}
        @Override
        public {{ name }} build() {
            return new {{ name }}(this);
        }
    }
}

