package {{ package }};

{% if doc %}
/** {{ doc }} */
{% endif %}
public class {{ name }} extends {{ base }} {
{% for field in declared_fields %}
    protected {{ field.type }} {{ field.name }};
{% endfor %}

    public {{ name }}() {
        this(builder()); {# To correctly set base type fields. #}

    }

    protected {{ name }}(final Builder builder) {
        super(builder);
{% for field in declared_fields %}
        {% if field.type.is_list -%}
            this.{{ field.name }} = builder.{{ field.name }} == null ? null
                : com.google.common.collect.ImmutableList.copyOf(builder.{{ field.name }});
        {%- elif field.type.is_set -%}
            this.{{ field.name }} = builder.{{ field.name }} == null ? null
                : com.google.common.collect.ImmutableSet.copyOf(builder.{{ field.name }});
        {%- elif field.type.is_map -%}
            this.{{ field.name }} = builder.{{ field.name }} == null ? null
                : com.google.common.collect.ImmutableMap.copyOf(builder.{{ field.name }});
        {%- else -%}
            this.{{ field.name }} = builder.{{ field.name }};
        {%- endif %}

{% endfor %}
    }
    
    public static {{ name }} parseMap(final java.util.Map<String, Object> map) {
        return ({{ name }}) descriptor().parseObject(map);
    }

    public static {{ name }} parseJson(final String s) {
        return ({{ name }}) descriptor().parseJson(s);
    }

{% for field in declared_fields %}
{% if field.type.is_nullable%}
    @javax.annotation.Nullable
{% endif %}
    public {{ field.type.unboxed }} {{ field.get }}() {
        return {{ field.name }} != null ? {{ field.name }} : {{ field.type.default }};
    }

    public boolean {{ field.present }}() {
        return {{ field.name }} != null;
    }

{% endfor %}
    @Override
    public Builder toBuilder() {
        return builder().merge(this);
    }

    @Override
    public Builder builderForType() {
        return builder();
    }

    @Override
    public pdef.descriptors.MessageDescriptor descriptorForType() {
        return descriptor();
    }

    public static class Builder extends {{ base }}.Builder {
{% for field in declared_fields %}
        protected {{ field.type }} {{ field.name }};
{% endfor %}

{% if not base_type %}
        protected Builder() {
{% else %}
        protected Builder() {
            super();
{% endif %}
{% if base_type %}
            this.{{ base_discriminator.name }} = {{ base_type }};
{% endif %}

        }

        public Builder merge(final pdef.Message message) {
            super.merge(message);
            {{ name }} msg = ({{ name }}) message;
{% for field in declared_fields %}
{% if not field.is_discriminator %}
            if (msg.{{ field.name }} != null) this.{{ field.name }} = msg.{{ field.name }};
{% endif %}
{% endfor %}
            return this;
        }

{% for field in declared_fields %}
        {% if field.type.nullable -%} @javax.annotation.Nullable {%- endif -%}
        public {{ field.type.unboxed }} {{ field.get }}() {
            return {{ field.name }} != null ? {{ field.name }} : {{ field.type.default }};
        }

        public Builder {{ field.set }}(final {{ field.type }} value) {
            this.{{ field.name }} = value;
            return this;
        }

        public boolean {{ field.present }}() {
            return {{ field.name }} != null;
        }

{% endfor %}
{% for field in inherited_fields %}
        @Override
        public Builder {{ field.set }}(final {{ field.type }} value) {
            super.{{ field.set }}(value);
            return this;
        }

{% endfor %}
        @Override
        public {{ name }} build() {
            return new {{ name }}(this);
        }
    }

    public static Builder builder() {
        return new Builder();
    }

    public static {{ name }} instance() {
        return INSTANCE;
    }

    public static pdef.descriptors.MessageDescriptor descriptor() {
        return DESCRIPTOR;
    }
    
    private static final {{ name }} INSTANCE = new {{ name }}();
    private static final pdef.descriptors.MessageDescriptor DESCRIPTOR = null;
}

