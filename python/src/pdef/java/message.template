package {{ package }};

{% if doc %}
/** {{ doc }} */
{% endif %}
{% if subtypes %}
@io.pdef.Discriminator("{{ discriminator_field.name }}")
@io.pdef.Subtypes({
{% for type, submessage in subtypes %}
        @io.pdef.Subtype(type = "{{ type }}", value = {{ submessage }}.class)
        {%- if loop.length > 1 and not loop.last %}, {% endif %}

{% endfor %}
})
{% endif %}
public class {{ name }} extends {{ base }} {
    private static final {{ name }} instance = new {{ name }}();

{% for field in declared_fields %}
    protected {{ field.type }} {{ field.name }};
{% endfor %}

    public {{ name }}() {
        this(new Builder());
    }

    public {{ name }}(final Builder builder) {
        super(builder);
{% for field in declared_fields %}
        {% if field.type.is_list -%}
            this.{{ field.name }} = builder.{{ field.name }} == null ? null
                : com.google.common.collect.ImmutableList.copyOf(builder.{{ field.name }});
        {%- elif field.type.is_set -%}
            this.{{ field.name }} = builder.{{ field.name }} == null ? null
                : com.google.common.collect.ImmutableSet.copyOf(builder.{{ field.name }});
        {%- elif field.type.is_map -%}
            this.{{ field.name }} = builder.{{ field.name }} == null ? null
                : com.google.common.collect.ImmutableMap.copyOf(builder.{{ field.name }});
        {%- else -%}
            this.{{ field.name }} = builder.{{ field.name }};
        {%- endif %}

{% endfor %}
    }

{% for field in declared_fields %}
{% if field.type.is_nullable%}
    @javax.annotation.Nullable
{% endif %}
    public {{ field.type }} {{ field.get }}() {
        {% if field.type.is_primitive -%}
            return {{ field.name }};
        {%- else -%}
            return {{ field.name }} != null ? {{ field.name }} : {{ field.type.default }};
        {%- endif %}

    }

    public boolean {{ field.present }}() {
        {% if field.type.is_primitive -%}
            return true;
        {%- else -%}
            return {{ field.name }} != null;
        {%- endif %}

    }

{% endfor %}
    @Override
    public Builder toBuilder() {
        return new Builder(this);
    }

    @Override
    public Builder newEmptyBuilder() {
        return builder();
    }

    public static {{ name }} getInstance() {
        return instance;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends {{ base_builder }} {
{% for field in declared_fields %}
        protected {{ field.type }} {{ field.name }};
{% endfor %}

        protected Builder() {
            {% if base_type -%}
                super({{ base_type }});
            {%- endif %}

        }

        protected Builder(final {{ name }} message) {
            super(message);
            {% for field in declared_fields -%}
                this.{{ field.name }} = message.{{ field.name }};
            {% endfor %}

        }
{% if discriminator_field %}

        protected Builder(final {{ discriminator_field.type }} {{ discriminator_field.name }}) {
            this();
            this.{{ discriminator_field.name }} = {{ discriminator_field.name }};
        }
{% endif %}

{% for field in declared_fields %}
        {% if field.type.nullable -%} @javax.annotation.Nullable {%- endif -%}
        public {{ field.type }} {{ field.get }}() {
            {% if field.type.is_primitive -%}
                return {{ field.name }};
            {%- else -%}
                return {{ field.name }} != null ? {{ field.name }} : {{ field.type.default }};
            {%- endif %}

        }

        public Builder {{ field.set }}(final {{ field.type }} value) {
            this.{{ field.name }} = value;
            return this;
        }

        public Builder {{ field.clear }}() {
            {% if field.type.is_primitive -%}
                this.{{ field.name }} = {{ field.type.default }};
            {%- else -%}
                this.{{ field.name }} = null;
            {%- endif %}

            return this;
        }

        public boolean {{ field.present }}() {
            {% if field.type.is_primitive -%}
                return true;
            {%- else -%}
                return {{ field.name }} != null;
            {%- endif %}

        }

{% endfor %}
{% for field in inherited_fields %}
        @Override
        public Builder {{ field.set }}(final {{ field.type }} value) {
            super.{{ field.set }}(value);
            return this;
        }

        @Override
        public Builder {{ field.clear }}() {
            super.{{ field.clear }}();
            return this;
        }

{% endfor %}
        @Override
        public {{ name }} build() {
            return new {{ name }}(this);
        }


        @Override
        public String toString() {
            return com.google.common.base.Objects.toStringHelper(this)
{% for field in fields %}
                    .add("{{ field.name }}", {{ field.name }})
{% endfor %}
                    .toString();
        }

        @Override
        public boolean equals(final Object o) {
            {% if not declared_fields -%}
                return super.equals(o);
            {% else %}
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            if (!super.equals(o)) return false;
            {{ name }} cast = ({{ name }}) o;

            {% for field in declared_fields -%}
            {% if field.type.is_primitive -%}
                if (this.{{ field.name }} != cast.{{ field.name }}) return false;
            {%- else -%}
                if (this.{{ field.name }} != null ? !this.{{ field.name }}.equals(cast.{{ field.name }})
                    : cast.{{ field.name }} != null) return false;
            {%- endif %}

            {% endfor %}

            return true;
            {% endif %}

        }

        @Override
        public int hashCode() {
            {% if not declared_fields -%}
                return super.hashCode();
            {%- else -%}
            int result = super.hashCode();
            return com.google.common.base.Objects.hashCode(result,
                    {% for field in declared_fields -%}this.{{ field.name }}
                    {%- if loop.length > 1 and not loop.last -%}, {% elif loop.last %}); {% endif %}

                    {% endfor %}
            {%- endif %}

        }
    }

    @Override
    public String toString() {
        return com.google.common.base.Objects.toStringHelper(this)
{% for field in fields %}
                .add("{{ field.name }}", {{ field.name }})
{% endfor %}
                .toString();
    }

    @Override
    public boolean equals(final Object o) {
{% if not declared_fields %}
        return super.equals(o);
{% else %}
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        if (!super.equals(o)) return false;
        {{ name }} cast = ({{ name }}) o;

{% for field in declared_fields %}
        {% if field.type.is_primitive -%}
            if (this.{{ field.name }} != cast.{{ field.name }}) return false;
        {%- else -%}
            if (this.{{ field.name }} != null ? !this.{{ field.name }}.equals(cast.{{ field.name }})
                : cast.{{ field.name }} != null) return false;
        {%- endif %}

{% endfor %}

        return true;
{% endif %}
    }

    @Override
    public int generateHashCode() {
        {% if not declared_fields -%}
            return super.generateHashCode();
        {%- else -%}
        int result = super.generateHashCode();
        return com.google.common.base.Objects.hashCode(result,
                {% for field in declared_fields -%}this.{{ field.name }}
                {%- if loop.length > 1 and not loop.last -%}, {% elif loop.last %}); {% endif %}

                {% endfor %}
        {%- endif %}

    }
}

