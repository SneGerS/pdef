# encoding: utf-8
# Generated by Pdef compiler 1.0-beta3.dev. DO NOT EDIT.
import pdef
import pdef.descriptors

class RpcStatus(pdef.Enum):
    """
    RPC status.
    OK - successful response.
    EXCEPTION - successful response, expected application exception.
    """

    OK = 'OK'
    EXCEPTION = 'EXCEPTION'

    DESCRIPTOR = pdef.descriptors.enum(lambda: RpcStatus,
        values=[OK, EXCEPTION])


class RpcResult(pdef.Message):
    def __init__(self, status=None): 
        self.status = status

    DESCRIPTOR = pdef.descriptors.message(lambda: RpcResult,
        fields=(
            pdef.descriptors.field('status', lambda: RpcStatus.DESCRIPTOR),
        ),
    )


class RpcError(pdef.Exc):
    """
    Internal exceptions which can be used in clients and servers.
    They should be mapped to corresponding rpc statuses in responses.
    """

    def __init__(self, text=None): 
        self.text = text

    DESCRIPTOR = pdef.descriptors.message(lambda: RpcError,
        fields=(
            pdef.descriptors.field('text', lambda: pdef.descriptors.string0),
        ),
    )


class ServerError(RpcError):
    """Internal server error."""

    def __init__(self, text=None): 
        super(ServerError, self).__init__(
            text=text) 
        pass

    DESCRIPTOR = pdef.descriptors.message(lambda: ServerError,
        base=RpcError.DESCRIPTOR,
        discriminator_value=None,
    )


class ServiceUnavailableError(RpcError):
    """Temporary network error, service unavailable, the request can be repeated."""

    def __init__(self, text=None): 
        super(ServiceUnavailableError, self).__init__(
            text=text) 
        pass

    DESCRIPTOR = pdef.descriptors.message(lambda: ServiceUnavailableError,
        base=RpcError.DESCRIPTOR,
        discriminator_value=None,
    )


class ClientError(RpcError):
    """Client error (bad request), the request should not be repeated."""

    def __init__(self, text=None): 
        super(ClientError, self).__init__(
            text=text) 
        pass

    DESCRIPTOR = pdef.descriptors.message(lambda: ClientError,
        base=RpcError.DESCRIPTOR,
        discriminator_value=None,
    )


class MethodNotFoundError(ClientError):
    """Method not found."""

    def __init__(self, text=None): 
        super(MethodNotFoundError, self).__init__(
            text=text) 
        pass

    DESCRIPTOR = pdef.descriptors.message(lambda: MethodNotFoundError,
        base=ClientError.DESCRIPTOR,
        discriminator_value=None,
    )


class WrongMethodArgsError(ClientError):
    """Wrong method arguments."""

    def __init__(self, text=None): 
        super(WrongMethodArgsError, self).__init__(
            text=text) 
        pass

    DESCRIPTOR = pdef.descriptors.message(lambda: WrongMethodArgsError,
        base=ClientError.DESCRIPTOR,
        discriminator_value=None,
    )


class MethodNotAllowedError(ClientError):
    """HTTP method is not allowed, for example, a get request to a post method."""

    def __init__(self, text=None): 
        super(MethodNotAllowedError, self).__init__(
            text=text) 
        pass

    DESCRIPTOR = pdef.descriptors.message(lambda: MethodNotAllowedError,
        base=ClientError.DESCRIPTOR,
        discriminator_value=None,
    )


